[{"name":"app.R","content":"library(shiny)\r\nlibrary(lubridate)\r\nlibrary(stringr)\r\n\r\n# Custom function to parse German date format\r\nparse_german_date <- function(date_string) {\r\n  german_months <- c(\"Jan\\\\.\", \"Feb\\\\.\", \"März\", \"Apr\\\\.\", \"Mai\", \"Juni\", \r\n                     \"Juli\", \"Aug\\\\.\", \"Sept\\\\.\", \"Okt\\\\.\", \"Nov\\\\.\", \"Dez\\\\.\")\r\n  english_months <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \r\n                      \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\r\n  \r\n  for (i in 1:length(german_months)) {\r\n    date_string <- str_replace(date_string, german_months[i], english_months[i])\r\n  }\r\n  \r\n  parsed_date <- parse_date_time(date_string, orders = c(\"d.b Y\", \"d.b Y H:M p\"))\r\n  return(parsed_date)\r\n}\r\n\r\n# UI Definition\r\nui <- fluidPage(\r\n  titlePanel(\"Text Processor\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      textAreaInput(\"textInput\", \"Paste your text here:\", rows = 10),\r\n      textInput(\"endTime\", \"Enter end time (HH:MM)\", value = \"\"),\r\n      br(), br()\r\n    ),\r\n    \r\n    mainPanel(\r\n      h3(\"Original\"),\r\n      verbatimTextOutput(\"contents\"),\r\n      uiOutput(\"translatedContent\")\r\n    )\r\n  )\r\n)\r\n\r\n# Server-Funktion\r\nserver <- function(input, output) {\r\n  originalContent <- reactive({\r\n    if (is.null(input$textInput) || input$textInput == \"\") {\r\n      return(\"Waiting for input\")\r\n    }\r\n    input$textInput\r\n  })\r\n  \r\n  output$translatedContent <- renderUI({\r\n    if (nchar(input$endTime) > 0 && nchar(input$textInput) > 0) {\r\n      fluidRow(\r\n        column(6, \r\n               h3(\"Deutsch\"),\r\n               verbatimTextOutput(\"german\"),\r\n               downloadButton(\"downloadGerman\", \"Export German\")\r\n        ),\r\n        column(6, \r\n               h3(\"English\"),\r\n               verbatimTextOutput(\"english\"),\r\n               downloadButton(\"downloadEnglish\", \"Export English\")\r\n        )\r\n      )\r\n    }\r\n  })\r\n  \r\n  editedContent <- reactive({\r\n    if (is.null(input$textInput) || input$textInput == \"\") {\r\n      return(list(de = \"Waiting for input\", en = \"Waiting for input\"))\r\n    }\r\n    \r\n    lines <- strsplit(input$textInput, \"\\n\")[[1]]\r\n    \r\n    # Extract workshop title\r\n    workshop_line <- lines[grep(\"^Thema:\", lines)]\r\n    workshop_title <- str_trim(sub(\"^Thema:\\\\s*\", \"\", workshop_line))\r\n    \r\n    # Extract date and time information\r\n    zeit_line <- lines[grep(\"^Zeit:\", lines)]\r\n    jeden_tag_line <- lines[grep(\"^\\\\s+Jeden Tag,\", lines)]\r\n    \r\n    start_date_time <- str_extract(zeit_line, \"\\\\d+\\\\.\\\\w+\\\\.\\\\s+\\\\d{4}\\\\s+\\\\d{2}:\\\\d{2}\\\\s+[AP]M\")\r\n    end_date <- str_extract(jeden_tag_line, \"\\\\d+\\\\.\\\\w+\\\\.\\\\s+\\\\d{4}\")\r\n    \r\n    parsed_start <- parse_german_date(start_date_time)\r\n    parsed_end <- parse_german_date(end_date)\r\n    \r\n    start_date <- format(parsed_start, \"%d. %b. %Y\")\r\n    end_date <- format(parsed_end, \"%d. %b. %Y\")\r\n    start_time <- format(parsed_start, \"%I:%M %p\")\r\n    \r\n    # Extract URL\r\n    url_line <- lines[grep(\"^https://\", lines)]\r\n    url <- str_trim(url_line)\r\n    \r\n    # Extract Meeting-ID and Kenncode\r\n    meeting_id_line <- lines[grep(\"^Meeting-ID:\", lines)]\r\n    meeting_id <- str_trim(sub(\"^Meeting-ID:\\\\s*\", \"\", meeting_id_line))\r\n    \r\n    kenncode_line <- lines[grep(\"^Kenncode:\", lines)]\r\n    kenncode <- str_trim(sub(\"^Kenncode:\\\\s*\", \"\", kenncode_line))\r\n    \r\n    formatted_content_de <- paste(\r\n      \"Dr. Paul Schmidt lädt Sie zu einem geplanten Zoom-Meeting ein.\\n\\n\",\r\n      sprintf(\"Workshop: %s\\n\", workshop_title),\r\n      sprintf(\"Tage: %s - %s\\n\", start_date, end_date),\r\n      sprintf(\"Zeit: %s- %s\\n\\n\", start_time, input$endTime),\r\n      \"Beitreten Zoom Meeting\\n\",\r\n      sprintf(\"%s\\n\\n\", url),\r\n      sprintf(\"Meeting-ID: %s\\n\", meeting_id),\r\n      sprintf(\"Kenncode: %s\\n\\n\", kenncode),\r\n      \"Hinweise zur Vorbereitung\\n\",\r\n      \"https://schmidtpaul.github.io/dsfair_quarto/ch/misc/workshopprep.html\",\r\n      sep = \"\"\r\n    )\r\n    \r\n    formatted_content_en <- paste(\r\n      \"Dr. Paul Schmidt is inviting you to a planned zoom meeting.\\n\\n\",\r\n      sprintf(\"Workshop: %s\\n\", workshop_title),\r\n      sprintf(\"Days: %s - %s\\n\", start_date, end_date),\r\n      sprintf(\"Time: %s- %s\\n\\n\", start_time, input$endTime),\r\n      \"Join zoom meeting\\n\",\r\n      sprintf(\"%s\\n\\n\", url),\r\n      sprintf(\"Meeting-ID: %s\\n\", meeting_id),\r\n      sprintf(\"Code: %s\\n\\n\", kenncode),\r\n      \"Preparation notes\\n\",\r\n      \"https://schmidtpaul.github.io/dsfair_quarto/ch/misc/workshopprep.html\",\r\n      sep = \"\"\r\n    )\r\n    \r\n    list(de = formatted_content_de, en = formatted_content_en)\r\n  })\r\n  \r\n  output$contents <- renderText({ originalContent() })\r\n  output$german <- renderText({ if (nchar(input$endTime) > 0 && nchar(input$textInput) > 0) editedContent()$de })\r\n  output$english <- renderText({ if (nchar(input$endTime) > 0 && nchar(input$textInput) > 0) editedContent()$en })\r\n  \r\n  output$downloadGerman <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"Zoom Meeting Einladung.txt\")\r\n    },\r\n    content = function(file) {\r\n      cat(editedContent()$de, file = file)\r\n    }\r\n  )\r\n  \r\n  output$downloadEnglish <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"Zoom meeting invitation.txt\")\r\n    },\r\n    content = function(file) {\r\n      cat(editedContent()$en, file = file)\r\n    }\r\n  )\r\n}\r\n\r\n# Start the Shiny app\r\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"zoom_invitation_formatter.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
